local wk = require 'which-key'

wk.add({
  { "<leader>A",  '<cmd>lua require("spectre").toggle()<cr>',                           desc = "find & replace" },
  { "<leader>C",  "<cmd>ColorizerToggle<cr>",                                           desc = "colorizer" },
  { "<leader>D",  '<cmd>lua require"dap".step_over()<cr>',                              desc = "debug next" },
  { "<leader>f",  "<cmd>lua vim.lsp.buf.format()<cr>",                                  desc = "format" },
  { "<leader>F",  "<cmd>Telescope find_files<cr>",                                      desc = "find files" },
  { "<leader>P",  group = "packer" },
  { "<leader>PC", "<cmd>PackerClean<cr>",                                               desc = "clean" },
  { "<leader>Pc", "<cmd>PackerCompile<cr>",                                             desc = "compile" },
  { "<leader>Pi", "<cmd>so | PackerInstall<cr>",                                        desc = "install" },
  { "<leader>Ps", "<cmd>PackerStatus<cr>",                                              desc = "status" },
  { "<leader>Pu", "<cmd>PackerUpdate<cr>",                                              desc = "update" },
  { "<leader>S",  group = "snippet" },
  { "<leader>Ss", '<cmd>lua require "utils".open_snippets()<cr>',                       desc = "edit" },
  { "<leader>Su", '<cmd>lua require "utils".refresh_snippets()<cr>',                    desc = "refresh" },
  { "<leader>T",  group = "treesitter" },
  { "<leader>To", "<cmd>TSPlaygroundToggle<cr>",                                        desc = "playground" },
  { "<leader>a",  group = "actions" },
  { "<leader>ah", "<cmd>TSHighlightCapturesUnderCursor<cr>",                            desc = "highlight" },
  { "<leader>as", "<cmd>so<cr>",                                                        desc = "source" },
  { "<leader>c",  "<cmd>let @/ = ''<cr>",                                               desc = "clear search" },
  { "<leader>d",  group = "diagnostic" },
  { "<leader>db", '<cmd>lua require"dap".toggle_breakpoint()<cr>',                      desc = "breakpoint" },
  { "<leader>dd", '<cmd>lua require"dap".continue()<cr>',                               desc = "start" },
  { "<leader>dj", '<cmd>lua require "jdtls.dap".setup_dap_main_class_configs()<cr>',    desc = "java setup" },
  { "<leader>dn", '<cmd>lua require"dap".step_over()<cr>',                              desc = "step" },
  { "<leader>dr", '<cmd>lua require"dap".repl.toggle()<cr>',                            desc = "repl" },
  { "<leader>e",  "<cmd>NvimTreeToggle<cr>",                                            desc = "tree" },
  { "<leader>g",  group = "git" },
  { "<leader>gA", "<cmd>Git add .<cr>",                                                 desc = "add all" },
  { "<leader>gB", "<cmd>Gitsigns toggle_current_line_blame<cr>",                        desc = "toggle blame" },
  { "<leader>gL", "<cmd>Telescope git_commits<cr>",                                     desc = "list commits" },
  { "<leader>gP", "<cmd>Git push<cr>",                                                  desc = "push" },
  { "<leader>gS", "<cmd>Git status<cr>",                                                desc = "status" },
  { "<leader>ga", "<cmd>Git add %<cr>",                                                 desc = "add current" },
  { "<leader>gb", "<cmd>Gitsigns blame_line<cr>",                                       desc = "line blame" },
  { "<leader>gc", "<cmd>Git commit<cr>",                                                desc = "commit" },
  { "<leader>gl", "<cmd>Telescope git_bcommits<cr>",                                    desc = "list bcommits" },
  { "<leader>gn", "<cmd>Gitsigns toggle_numhl<cr>",                                     desc = "signs" },
  { "<leader>gs", "<cmd>Gitsigns toggle_signs<cr>",                                     desc = "signs" },
  { "<leader>h",  "<cmd>Telescope help_tags<cr>",                                       desc = "help" },
  { "<leader>l",  group = "lsp" },
  { "<leader>lD", "<cmd>lua vim.diagnostic.enable()<cr>",                               desc = "enable" },
  { "<leader>lT", "<cmd>Trouble diagnostics<cr>",                                       desc = "global diag." },
  { "<leader>lc", "<cmd>lua vim.lsp.buf.code_action()<cr>",                             desc = "code action" },
  { "<leader>ld", "<cmd>lua vim.diagnostic.disable()<cr>",                              desc = "disable" },
  { "<leader>lt", "<cmd>Trouble diagnostics<cr>",                              desc = "file diag." },
  { "<leader>o",  "<cmd>SymbolsOutline<cr>",                                            desc = "outline" },
  { "<leader>p",  group = "pandoc" },
  { "<leader>pD", "<cmd>e ~/.local/share/pandoc/defaults.yaml<cr>",                     desc = "default metadata" },
  { "<leader>pd", "<cmd>e ~/.local/share/pandoc/templates/default.latex<cr>",           desc = "default template" },
  { "<leader>pm", '<cmd>silent exec "!make"<cr>',                                       desc = "make" },
  { "<leader>pp", "<cmd>e ~/.local/share/pandoc/templates/paper.latex<cr>",             desc = "paper template" },
  { "<leader>pv", '<cmd>silent exec "!make view"<cr>',                                  desc = "view" },
  { "<leader>q",  '<cmd>lua require"utils.close".close()<cr>',                          desc = "close buffer" },
  { "<leader>r",  "<cmd>FloatermNew --height=0.9 --width=0.9 lf<cr>",                   desc = "lf" },
  { "<leader>s",  group = "settings" },
  { "<leader>sc", "<cmd>set conceallevel=0<cr>",                                        desc = "no-conceal" },
  { "<leader>sh", "<cmd>set conceallevel=2<cr>",                                        desc = "conceal" },
  { "<leader>si", "<cmd>lua toggle_status()<cr>",                                       desc = "toggle status bar" },
  { "<leader>so", "<cmd>lua toggle_commmand()<cr>",                                     desc = "toggle command bar" },
  { "<leader>ss", "<cmd>setlocal spell!<cr>",                                           desc = "spell" },
  { "<leader>sw", "<cmd>set wrap!<cr>",                                                 desc = "wrap" },
  { "<leader>t",  group = "telescope" },
  { "<leader>tO", "<cmd>Telescope vim_options<cr>",                                     desc = "vim options" },
  { "<leader>tR", "<cmd>Telescope registers<cr>",                                       desc = "registers" },
  { "<leader>tc", "<cmd>Telescope command_history<cr>",                                 desc = "command history" },
  { "<leader>to", "<cmd>Telescope oldfiles<cr>",                                        desc = "old files" },
  { "<leader>tr", "<cmd>Telescope live_grep<cr>",                                       desc = "grep" },
  { "<leader>ts", "<cmd>Telescope search_history<cr>",                                  desc = "searches" },
  { "<leader>ty", "<cmd>Telescope neoclip<cr>",                                         desc = "neoclip" },
  { "<leader>z",  group = "files" },
  { "<leader>z=", "<cmd>e ~/other/dotfiles/config/picom/picom.conf<cr>",                desc = "picom" },
  { "<leader>zM", "<cmd>e ~/other/dotfiles/config/nvim/lua/mappings/lsp.lua<cr>",       desc = "mappings" },
  { "<leader>zb", "<cmd>e ~/other/dotfiles/config/bspwm/bspwmrc<cr>",                   desc = "bspwmrc" },
  { "<leader>zh", "<cmd>e ~/other/dotfiles/config/nvim/lua/highlight.lua<cr>",          desc = "highlight" },
  { "<leader>zi", "<cmd>e ~/other/dotfiles/config/nvim/init.lua<cr>",                   desc = "vimrc" },
  { "<leader>zl", "<cmd>e ~/other/dotfiles/config/lf/lfrc<cr>",                         desc = "lfrc" },
  { "<leader>zm", "<cmd>e ~/other/dotfiles/config/nvim/lua/mappings/general.lua<cr>",   desc = "mappings" },
  { "<leader>zp", "<cmd>e ~/other/dotfiles/config/nvim/lua/plugins.lua<cr>",            desc = "plugins" },
  { "<leader>zs", "<cmd>e ~/other/dotfiles/config/sxhkd/sxhkdrc<cr>",                   desc = "sxhkd" },
  { "<leader>zt", "<cmd>e ~/university/TODO.md<cr>",                                    desc = "TODO" },
  { "<leader>zw", "<cmd>e ~/other/dotfiles/config/nvim/lua/mappings/which-key.lua<cr>", desc = "mappings" },
  { "<leader>zz", "<cmd>e ~/other/dotfiles/config/zsh/.zshrc<cr>",                      desc = "zshrc" },
})
